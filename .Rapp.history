plot(tamiasEPM)
plot(tamiasEPM, use_tmap = F, fastPoints=T)
?createEPMgrid
# square grid#
tamiasEPM2 <- createEPMgrid(tamiasPolyList, resolution = 50000,#
	cellType = 'square', method = 'centroid')#
tamiasEPM2
plot(tamiasEPM2)
plot(tamiasEPM2, use_tmap = F)
x = tamiasEPM; log = FALSE; legend = TRUE; basemap = 'worldmap'; colorRampRange = NULL; ignoredColor = gray(0.9); lwd = 0.25; borderCol = 'black'; includeFrame = FALSE; use_tmap = TRUE; alpha = 1; add = FALSE; fastPoints = FALSE; minTaxCount = 'auto'; title = NA
plotMetric <- attributes(x)$metric
if (minTaxCount == 'auto') {#
		if (plotMetric %in% c('range', 'mean_NN_dist', 'min_NN_dist', 'evenness', 'variance', 'disparity', 'rangePCA', 'meanPatristic', 'meanPatristicNN', 'minPatristicNN', 'phyloEvenness', 'phyloDisparity', 'PSV', 'PSR')) {#
			minTaxCount <- 2#
		} else {#
			minTaxCount <- 1#
		}#
	}
ncolors <- 100#
	isInt <- FALSE#
	if (inherits(x[[1]], 'sf')) {#
		if (all(integercheck(sf::st_drop_geometry(x[[1]])[, plotMetric]))) {#
			isInt <- TRUE#
			if (max(x[[1]][[plotMetric]]) <= 10) {#
				ncolors <- max(x[[1]][[plotMetric]])#
			}#
		}	#
	} else if (inherits(x[[1]], 'SpatRaster')) {#
		samp <- sample(as.vector(stats::na.omit(terra::values(x[[1]][plotMetric]))), size = 1000, replace = TRUE)#
		if (all(integercheck(samp))) {#
			isInt <- TRUE#
			if (max(terra::minmax(x[[1]][plotMetric])) <= 10) {#
				ncolors <- max(terra::minmax(x[[1]][plotMetric]))#
			}#
		}#
	}
integercheck <- epm:::integercheck
ncolors <- 100#
	isInt <- FALSE#
	if (inherits(x[[1]], 'sf')) {#
		if (all(integercheck(sf::st_drop_geometry(x[[1]])[, plotMetric]))) {#
			isInt <- TRUE#
			if (max(x[[1]][[plotMetric]]) <= 10) {#
				ncolors <- max(x[[1]][[plotMetric]])#
			}#
		}	#
	} else if (inherits(x[[1]], 'SpatRaster')) {#
		samp <- sample(as.vector(stats::na.omit(terra::values(x[[1]][plotMetric]))), size = 1000, replace = TRUE)#
		if (all(integercheck(samp))) {#
			isInt <- TRUE#
			if (max(terra::minmax(x[[1]][plotMetric])) <= 10) {#
				ncolors <- max(terra::minmax(x[[1]][plotMetric]))#
			}#
		}#
	}
isInt
ncolors
colramp <- function(n) viridisLite::turbo(n = n, begin = 0.1, end = 0.9)
lwd <- 0.15
metricName <- plotMetric
x
x <- tamiasEPM2
ncolors <- 100#
	isInt <- FALSE#
	if (inherits(x[[1]], 'sf')) {#
		if (all(integercheck(sf::st_drop_geometry(x[[1]])[, plotMetric]))) {#
			isInt <- TRUE#
			if (max(x[[1]][[plotMetric]]) <= 10) {#
				ncolors <- max(x[[1]][[plotMetric]])#
			}#
		}	#
	} else if (inherits(x[[1]], 'SpatRaster')) {#
		samp <- sample(as.vector(stats::na.omit(terra::values(x[[1]][plotMetric]))), size = 1000, replace = TRUE)#
		if (all(integercheck(samp))) {#
			isInt <- TRUE#
			if (max(terra::minmax(x[[1]][plotMetric])) <= 10) {#
				ncolors <- max(terra::minmax(x[[1]][plotMetric]))#
			}#
		}#
	}
isInt
ncolors
datBB <- sf::st_bbox(sf::st_as_sf(as.data.frame(terra::xyFromCell(x[[1]], which(!is.na(terra::values(x[[1]][[plotMetric]]))))), coords = 1:2, crs = sf::st_crs(x[[1]])))
if (log) {#
			metricName <- paste0('log ', plotMetric)#
			if (minTaxCount <= 1) {#
				metricMap <- log(x[[1]][plotMetric])#
			} else {#
				metricMap <- log(grid_multiSp[plotMetric])#
			}#
			isInt <- FALSE#
		} else {#
			if (minTaxCount <= 1) {#
				metricMap <- x[[1]][plotMetric]#
			} else {#
				metricMap <- grid_multiSp[plotMetric]#
			}#
		}
use_tmap
if (is.null(colorRampRange)) {#
				breaks <- NULL#
			} else {#
				breaks <- seq(min(colorRampRange), max(colorRampRange), length.out = 5)#
			}
map <- NULL
tmapStyle <- 'cont'
minTaxCount
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(1000), legend.show = legend, title = NA, breaks = breaks, style = tmapStyle, midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(1000), legend.show = legend, title = NA, breaks = breaks, style = pretty, midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(1000), legend.show = legend, title = NA, breaks = breaks, style = 'pretty', midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
?tm_raster
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(1000), legend.show = legend, title = NA, breaks = breaks, style = 'fixed', midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
breaks <- seq(min(colorRampRange), max(colorRampRange), length.out = 11)
max(x[[1]][[plotMetric]])
max(x[[1]][[plotMetric]])  == 5
max(values(x[[1]][[plotMetric]]))
max(terra::values(x[[1]][[plotMetric]]))
max(terra::values(x[[1]][[plotMetric]], na.rm = T))
range(terra::values(x[[1]][[plotMetric]], na.rm = T))
breaks <- seq(min(terra::values(x[[1]][[plotMetric]], na.rm = T)), max(terra::values(x[[1]][[plotMetric]], na.rm = T)), length.out = 11)
breaks
ncolors
breaks <- seq(min(terra::values(x[[1]][[plotMetric]], na.rm = T)), max(terra::values(x[[1]][[plotMetric]], na.rm = T)), length.out = 5)
breaks
tmap::tm_shape(metricMap, is.master = TRUE, bbox = datBB) + tmap::tm_raster(palette = colramp(1000), legend.show = legend, title = NA, breaks = breaks, style = tmapStyle, midpoint = NA, alpha = alpha) + tmap::tm_shape(grid_singleSp) + tmap::tm_raster(palette = ignoredColor, legend.show = FALSE, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(1000), legend.show = legend, title = NA, breaks = breaks, style = tmapStyle, midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(1000), legend.show = legend, title = NA, breaks = breaks, style = 'fixed', midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(1000), legend.show = legend, title = NA, breaks = breaks, style = 'equal', midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(1000), legend.show = legend, title = NA, breaks = NA, style = 'equal', midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(1000), legend.show = legend, title = NA, breaks = NA, style = 'pretty', midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(1000), legend.show = legend, title = NA, breaks = NA, style = 'cat', midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(1000), legend.show = legend, title = NA, breaks = breaks, style = 'cat', midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(1000), legend.show = legend, title = NA, breaks = NA, style = 'cat', midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(5), legend.show = legend, title = NA, breaks = NA, style = 'cat', midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
ncolors
source('~/Dropbox/ecoPhyloMapper/R/plot.epmGrid.R')
plot(tamiasEPM)
worldmap <- epm:::worldmap
plot(tamiasEPM)
plot(tamiasEPM2)
plot(tamiasEPM)
plot(tamiasEPM2)
plot(tamiasEPM2, title= 'test')
plot(tamiasEPM, title = 'test')
plot(tamiasEPM, use_tmap = F)
plot(tamiasEPM, use_tmap = F, fastPoints = T)
plot(tamiasEPM2, use_tmap = F)
x
isInt
(isInt & ncolors <= 10)
tmapStyle <- 'cat'
source('~/Dropbox/ecoPhyloMapper/R/plot.epmGrid.R')
plot(tamiasEPM, use_tmap = F, fastPoints = T)
plot(tamiasEPM2, use_tmap = F, fastPoints = T)
plot(tamiasEPM2)
plot(tamiasEPM2, title = 'sprich')
plot(tamiasEPM2, use_tmap = F)
?tm_layout
plot(tamiasEPM)
x
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(ncolors), legend.show = legend, title = title, breaks = breaks, style = tmapStyle, midpoint = NA, alpha = alpha) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(ncolors), legend.show = legend, title = title, breaks = breaks, style = tmapStyle, midpoint = NA, alpha = alpha, legend.reverse = T) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
title
title <- ''
tmap::tm_shape(metricMap, bbox = datBB) + tmap::tm_raster(palette = colramp(ncolors), legend.show = legend, title = title, breaks = breaks, style = tmapStyle, midpoint = NA, alpha = alpha, legend.reverse = T) + tmap::tm_layout(frame = includeFrame, legend.outside = TRUE)
source('~/Dropbox/ecoPhyloMapper/R/plot.epmGrid.R')
plot(tamiasEPM)
plot(tamiasEPM2)
plot(tamiasEPM)
tamiasEPM
tamiasEPM2
?gridMetrics
tamiasEPM <- addPhylo(tamiasEPM, tamiasTree)#
tamiasEPM <- addTraits(tamiasEPM, tamiasTraits)
x <- gridMetrics(tamiasEPM, metric='disparity')
plot(x)
plot(x, use_tmap = F, fastPoints = T)
tamiasEPM2 <- addPhylo(tamiasEPM2, tamiasTree)#
tamiasEPM2 <- addTraits(tamiasEPM2, tamiasTraits)
x <- gridMetrics(tamiasEPM2, metric='disparity')
plot(x)
plot(x, use_tmap = F)
update.packages(ask=F)
install.packages('terra')
require(BAMMtools)
tr <- read.tree('~/Downloads/fullbamm/squams-full-imputed-xx1.tre')
tr
?BAMMtools
setBAMMpriors(tr, outfile = NULL)
update.packages(ask=F)
Sys.which('gdal-config')
install.packages('terra')
install.packages('terra', type = 'source', configure.args = "--with-proj-lib=/usr/local/Cellar/proj@7/7.2.1/lib")
install.packages('terra', type = 'source', configure.args = "--with-proj-lib=/usr/local/Cellar/proj@7/7.2.1/lib --with-proj-include=/usr/local/Cellar/proj@7/7.2.1/include")
install.packages('terra', type = 'source', configure.args = "--with-proj-lib=/usr/local/Cellar/proj@7/7.2.1/lib --with-proj-include=/usr/local/Cellar/proj@7/7.2.1/include --with-proj-api=yes")
install.packages('terra', type = 'source', configure.args = "--with-proj-lib=/usr/local/opt/proj@7/lib --with-proj-include=/usr/local/opt/proj@7/include --with-proj-api=yes")
install.packages('terra', type = 'source', configure.args = "--with-proj-lib=/usr/local/opt/proj@7/lib --with-proj-include=/usr/local/opt/proj@7/include")
install.packages('terra', type = 'source')
require(terra)
require(ep)
require(epm)
?epm
tamiasEPM#
#
tamiasEPM <- addPhylo(tamiasEPM, tamiasTree)#
#
# phylogenetic turnover#
beta_phylo_turnover <- betadiv_phylogenetic(tamiasEPM, radius = 70000,#
		component = 'turnover')#
beta_phylo_nestedness <- betadiv_phylogenetic(tamiasEPM, radius = 70000,#
		component = 'nestedness')#
beta_phylo_full <- betadiv_phylogenetic(tamiasEPM, radius = 70000,#
		component = 'full')
beta_phylo_turnover
tamiasEPM2 <- createEPMgrid(tamiasPolyList, resolution = 50000,#
	cellType = 'square', method = 'centroid')#
tamiasEPM2 <- addPhylo(tamiasEPM2, tamiasTree)#
#
beta_phylo_full <- betadiv_phylogenetic(tamiasEPM2, radius = 70000,#
		component = 'full')
tamiasEPM2
beta_phylo_full
beta_phylo_turnover
help(package="betadiv")
help(package="betapart")
install.packages('betapart')
help(package='rcdd')
require(terra)
citation(package='terra')
citation(package='phangorn')
citation(package='ape')
require(epm)
?createEPMgrid
60000/9
update.packages(ask=F)
?poly
x <- c(32,64,96,118,126,144,152.5,158)  #
y <- c(99.5,104.8,108.5,100,86,64,35.3,15)
lm(y ~ poly(x, 3, raw=TRUE))
summary(lm(y ~ poly(x, 3, raw=TRUE)))
plot(lm(y ~ poly(x, 3, raw=TRUE)))
plot(y ~ x)
abline(lm(y ~ I(x^2))
)
lm(y ~ poly(x, 2, raw=TRUE))
abline('lm(y ~ poly(x, 2, raw=TRUE)))
abline(lm(y ~ poly(x, 2, raw=TRUE)))
abline(lm(y ~ poly(x, 1, raw=TRUE)))
abline(lm(y ~ poly(x, 2, raw=TRUE)))
plot(lm(y ~ x^2)
)
abline(lm(y ~ x^2))
abline(lm(y ~ x^3))
abline(lm(y ~ x^4))
?nls
?
SSasymp
library(tidyverse)#
library(broom)
install.packages('tidverse')
install.packages('tidyverse')
library(tidyverse)#
library(broom)
t = 1:100#
y1 = 22 + (53 - 22) * exp(-0.02 * t) %>% jitter(10)#
y2 = 24 + (60 - 24) * exp(-0.01 * t) %>% jitter(10)
head(sensor)
head(sensor1)
sensor1 <- df %>% filter(sensor == 'sensor1')
df <- tibble(t = t, y = y1, sensor = 'sensor1') %>% #
  rbind(. , data.frame(t = t, y = y2, sensor = 'sensor2'))
sensor1 <- df %>% filter(sensor == 'sensor1')
sensor1
data <- structure(list(x = 0:38, y = c(0.991744340878828, 0.512512332368168, #
0.41102449265681, 0.356621905557202, 0.320851602373477, 0.29499198506227, #
0.275037747162642, 0.25938850981822, 0.245263623938863, 0.233655093612007, #
0.224041426946405, 0.214152907133301, 0.207475138903635, 0.203270738895484, #
0.194942528735632, 0.188107106969046, 0.180926819430008, 0.177028560207711, #
0.172595416846822, 0.166729221891201, 0.163502461048814, 0.159286528409165, #
0.156110097827889, 0.152655498715612, 0.148684858095915, 0.14733605355542, #
0.144691873223729, 0.143118852619617, 0.139542186417186, 0.137730138713745, #
0.134353615271572, 0.132197800438632, 0.128369567159113, 0.124971834736476, #
0.120027536018095, 0.117678812415655, 0.115720611113327, 0.112491329844252, #
0.109219168085624)), class = "data.frame", row.names = c(NA, #
-39L), .Names = c("x", "y"))
data
fo3 <- y ~ 1/(b + x^c) # omit .lin parameter; plinear will add it automatically
fm3 <- nls(fo3, data = data, start = list(b = 1, c = 1), alg = "plinear")
Plot(data, fm3, "3 parameters")
# data = data.frame with x & y col names; fm = model fit; main = string shown above plot#
Plot <- function(data, fm, main) {#
  plot(y ~ x, data, pch = 20)#
  lines(fitted(fm) ~ x, data, col = "red")#
  legend("topright", bty = "n", cex = 0.7, legend = capture.output(fm))#
  title(main = paste(main, "- AIC:", round(AIC(fm), 2)))#
}
Plot(data, fm3, "3 parameters")
data
nlsfit1 <- nls(#
  y ~ SSasympOrig(x, Asym, lrc),#
  data = data.frame(x = x1, y = y1)#
)
nlsfit1 <- nls(#
  y ~ SSasympOrig(x, Asym, lrc),#
  data = data#
)
?
SSasympOrig
nlsfit1 <- nls(#
  y ~ SSasympOrig(x, Asym = 1, lrc = 1),#
  data = data#
)
head(data)
nlsfit1 <- nls(#
  y ~ SSasympOrig(x, Asym = 1, lrc = 1),#
  data = data#
)
require(spatialreg)
?errorsarlm
data(oldcol, package="spdep")#
listw <- spdep::nb2listw(COL.nb, style="W")
COL.errW.eig <- errorsarlm(CRIME ~ INC + HOVAL, data=COL.OLD,#
 listw, quiet=FALSE, control=list(pre_eig=ev))
ev <- eigenw(listw)
COL.errW.eig <- errorsarlm(CRIME ~ INC + HOVAL, data=COL.OLD,#
 listw, quiet=FALSE, control=list(pre_eig=ev))
COL.errW.eig
class(COL.errW.eig)
require(rangeBuilder)
require(sf)
require(terra)
pt <- rbind(c(-115.436, 32.657), c(-116.436, 32.657), c(-115.436, 31.657))
pt
crs = 4326
# convert from sp to sf#
	if (inherits(pt, c('SpatialPoints', 'SpatialPointsDataFrame'))) {#
		pt <- sf::st_as_sf(pt)#
	}	#
	# if spatial object#
	if (any(inherits(pt, c('sf', 'sfc')))) {#
		crs <- sf::st_crs(pt)#
		if (is.na(crs)) {#
			stop('If pt is a spatial object, it must have a crs.')#
		}#
		pt <- sf::st_coordinates(pt)#
	}
if (is.numeric(pt) & !is.matrix(pt)) {#
		pt <- matrix(pt, nrow = 1, ncol = 2)#
	} else {#
		pt <- as.matrix(pt)#
	}
pt
(!sf::st_is_longlat(sf::st_crs(crs)))
(is.matrix(pt) | is.data.frame(pt))
w <- shortDistInd(as.matrix(pt), as.matrix(worldPoints))
w <- rangeBuilder:::shortDistInd(as.matrix(pt), as.matrix(worldPoints))
w <- rangeBuilder:::shortDistInd(as.matrix(pt), as.matrix(rangeBuilder:::worldPoints))
head(w)
ret <- worldPointCountries[w]
length(w)
w
pt
pt <- pt[1,]
pt
w <- rangeBuilder:::shortDistInd(as.matrix(pt), as.matrix(rangeBuilder:::worldPoints))
w
pt
class(pt)
pt <- rbind(c(-115.436, 32.657), c(-116.436, 32.657), c(-115.436, 31.657))
pt
pt <- pt[1,]
pt
pt <- matrix(pt, nrow = 1, ncol = 2)
pt
w <- rangeBuilder:::shortDistInd(as.matrix(pt), as.matrix(rangeBuilder:::worldPoints))
e
w
require(epm)
citation(package='epm')
require(epm)
citation(package='epm')
require(epm)
citation(package='epm')
require(epm)
citation(package='epm')
require(epm)
?epm
require(epm)
?epm
require(epm)
?epm
citation('castor')
setwd('~/Dropbox/rangeBuilder/')
?usethis::use_github_action_check_standard()
usethis::use_github_action_check_standard()
setwd('./rangeBuilder')
usethis::use_github_action_check_standard()
usethis::use_github_action_check_standard()
